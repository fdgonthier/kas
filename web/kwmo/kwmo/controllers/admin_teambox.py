# Import teambox controller.
from kwmo.controllers.teambox import *

import hashlib, time, re
from kwmo.controllers.abstract_teambox import *

# Local libs
from kwmo.lib.kwmolib import MODE_WS

# Put after imports so log is not overwridden by an imported module.
log = logging.getLogger(__name__)

class AdminTeamboxController(TeamboxController):

    # FIXME: This is a duplicate of what is in TeamboxController.
    # When overriding some url_paths items, without having url_paths explicitely defined here,
    # url_paths is modified in TeamboxController, which was not expected.
    url_paths = kurl.get_base_url_paths(
            'teambox_updater',
            'credentials_download',
            'teambox_post_chat',
            'teambox_download',
            'teambox_upload',
            'vnc_session_start',
            'teambox_serverlog')
 
    # Show workspace main page.
    def show(self, workspace_id):
        # Overwride urls.
        self.url_paths['teambox_updater'] = kurl.get_base_url_path('admin_updater')
        self.url_paths['teambox_download'] = kurl.get_base_url_path('admin_file_download')

        return TeamboxController.show(self, workspace_id)

    # Allow login as a read-only admin user, using an hash generated by the kcd configuration interface.
    def login(self, workspace_id):
        # Get kcd database password. 
        from kwmo.lib.config import get_cached_kcd_external_conf_object
        expected_passwd = get_cached_kcd_external_conf_object().db_passwd

        if request.params.has_key('stamp') \
                and re.match(r"^\d+$", request.params['stamp']) \
                and request.params.has_key('hash'):

            # Get the provided parameters.
            stamp = int(request.params['stamp'])
            hex_hash = request.params['hash']

            # Make sure the stamp is in sync with the local server... the hash is good for 5 minutes.
            hash_timeout_secs = 300
            if abs(int(time.time()) - stamp) > hash_timeout_secs:
                log.warning("teambox_admin.login: Bad time stamp or servers time is out of sync.")
                return abort(403)

            # Generate the local hash.
            md5 = hashlib.md5()
            md5.update(str(stamp))
            md5.update(expected_passwd)
            expected_hex_hash = md5.digest().encode('hex')

            # Compare the provided hash and the generated one.
            if hex_hash == expected_hex_hash:

                # Login as user 1 (the workspace creator) in read-only mode.
                user_id = 1
                session_timeout_secs = 1800 # 30 minutes
                session['admin'] = True
                session['expiration_time'] = int(time.time()) + session_timeout_secs
                session['mode'] = MODE_WS
                session['user_id'] = user_id
                session['user'] = User.get_by(workspace_id=workspace_id, id=user_id).to_dict()
                c.perms.addRole('roadmin')
                session.save()

                # Redirect to teambox.
                redirect_to("teambox_admin", workspace_id=workspace_id)

            else:
                log.debug("teambox_admin.login: Bad admin password.")
                return abort(403)

        else:
            log.debug("teambox_admin.login: Bad parameters.")
            return abort(404)
            

